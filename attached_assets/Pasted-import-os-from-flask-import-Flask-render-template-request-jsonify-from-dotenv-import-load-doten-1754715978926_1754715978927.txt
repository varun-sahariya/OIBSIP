import os
from flask import Flask, render_template, request, jsonify
from dotenv import load_dotenv
from murf.client import Murf
import assemblyai as aai
import google.generativeai as genai # Import the Gemini SDK

# --- Load API Keys ---
load_dotenv()
aai.settings.api_key = os.getenv('ASSEMBLYAI_API_KEY')
# Configure the Gemini API key
genai.configure(api_key=os.getenv("GEMINI_API_KEY"))


app = Flask(__name__)

# --- Initialize Murf Client ---
try:
    murf_client = Murf()
except Exception as e:
    print(f"Failed to initialize Murf client: {e}")
    murf_client = None

# --- Main Route ---
@app.route('/')
def index():
    return render_template('index.html')

# --- Existing Endpoints ---
@app.route('/generate-audio', methods=['POST'])
def generate_audio():
    if not murf_client:
        return jsonify({'error': 'Murf client not initialized.'}), 500
    data = request.get_json()
    if not data or 'text' not in data:
        return jsonify({'error': 'No text provided'}), 400
    text_to_convert = data.get('text')
    try:
        res = murf_client.text_to_speech.generate(text=text_to_convert, voice_id="en-US-terrell", format="mp3")
        return jsonify({'audioUrl': res.audio_file})
    except Exception as e:
        return jsonify({'error': f'Error calling Murf API: {str(e)}'}), 502

@app.route('/tts/echo', methods=['POST'])
def tts_echo():
    if 'audio_file' not in request.files:
        return jsonify({'error': 'No audio file found'}), 400
    audio_file = request.files['audio_file']
    transcript_text = ""
    try:
        transcriber = aai.Transcriber()
        transcript = transcriber.transcribe(audio_file)
        if transcript.status == aai.TranscriptStatus.error:
            return jsonify({'error': transcript.error}), 500
        transcript_text = transcript.text
        if not transcript_text:
            return jsonify({'error': 'No speech detected in the audio.'}), 400
    except Exception as e:
        return jsonify({'error': f'Transcription failed: {str(e)}'}), 500
    try:
        if not murf_client:
            return jsonify({'error': 'Murf client not initialized.'}), 500
        res = murf_client.text_to_speech.generate(text=transcript_text, voice_id="en-US-linda", format="mp3")
        return jsonify({'audioUrl': res.audio_file})
    except Exception as e:
        return jsonify({'error': f'Murf TTS failed: {str(e)}'}), 502

# ===================================================
# --- NEW ENDPOINT FOR DAY 8 ---
# This is the code you need to screenshot for your post
# ===================================================
@app.route('/llm/query', methods=['POST'])
def llm_query():
    """Accepts text and gets a response from the Gemini LLM."""
    data = request.get_json()
    if not data or 'text' not in data:
        return jsonify({'error': 'No text provided'}), 400

    input_text = data.get('text')
    print(f"Received query for LLM: '{input_text}'")

    try:
        # Initialize the Gemini model
        model = genai.GenerativeModel('gemini-pro')
        
        # Generate the response
        response = model.generate_content(input_text)
        
        print(f"LLM Response: '{response.text}'")
        # Return the generated text in a JSON object
        return jsonify({'response': response.text})

    except Exception as e:
        print(f"--- ERROR FROM GEMINI API ---: {str(e)}")
        return jsonify({'error': f'Error calling Gemini API: {str(e)}'}), 500

if __name__ == '__main__':
    # Use host='0.0.0.0' to run on Replit
    app.run(host='0.0.0.0', port=5000, debug=True)